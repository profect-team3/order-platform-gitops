pipeline {
  agent {
    kubernetes {
      defaultContainer 'git'
      yaml """
apiVersion: v1
kind: Pod
spec:
  serviceAccountName: jenkins-agent-sa
  securityContext:
    runAsUser: 1000
    runAsGroup: 1000
    fsGroup: 1000
    fsGroupChangePolicy: "OnRootMismatch"
  volumes:
    - name: workspace-volume
      emptyDir: {}
  containers:
    - name: git
      image: alpine/git:2.45.2
      command: ['sh','-c','sleep infinity']
      tty: true
      env:
        - name: HOME
          value: /home/jenkins/agent
      volumeMounts:
        - name: workspace-volume
          mountPath: /home/jenkins/agent
    - name: yq
      image: mikefarah/yq:4
      command: ['sh','-c','sleep infinity']
      tty: true
      env:
        - name: HOME
          value: /home/jenkins/agent
      volumeMounts:
        - name: workspace-volume
          mountPath: /home/jenkins/agent
    - name: jnlp
      env:
        - name: HOME
          value: /home/jenkins/agent
      volumeMounts:
        - name: workspace-volume
          mountPath: /home/jenkins/agent
"""
    }
  }

  parameters {
    string(name: 'SERVICE_KEY',   defaultValue: 'user', description: 'services.<key>')
    string(name: 'IMAGE_DIGEST',  defaultValue: '',     description: '<repo>@sha256:... (예: .../order-user@sha256:abcd...)')
    string(name: 'GITOPS_PATH',   defaultValue: 'env/msa-apps/values.yaml')
    string(name: 'GITOPS_BRANCH', defaultValue: 'main')
    booleanParam(name: 'USE_PR',  defaultValue: false)
  }

  environment {
    GITOPS_REPO_URL = 'https://github.com/profect-team3/order-platform-gitops.git'
    BOT_NAME  = 'yun1270'
    BOT_EMAIL = 'modo000127@gmail.com'
  }

  options {
    timeout(time: 10, unit: 'MINUTES')
    disableConcurrentBuilds()
    skipDefaultCheckout(true)
  }

  stages {
    stage('Checkout GitOps') {
      steps {
        container('git') {
          withCredentials([usernamePassword(credentialsId: 'GitHub-signin', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PAT')]) {
            sh '''
              set -euo pipefail
              export HOME=/home/jenkins/agent

              rm -rf gitops
              HDR=$(printf "%s:%s" "$GIT_USER" "$GIT_PAT" | base64 | tr -d '\\n')
              git -c http.extraHeader="Authorization: Basic ${HDR}" \
                  clone --branch "${GITOPS_BRANCH}" "${GITOPS_REPO_URL}" gitops

              cd gitops
              git config user.name  "${BOT_NAME}"
              git config user.email "${BOT_EMAIL}"
              git config --global --add safe.directory "$(pwd)"

              chown -R 1000:1000 .
              chmod -R u+rwX,g+rwX .
            '''
          }
        }
      }
    }

    stage('Update values.yaml') {
      steps {
        container('yq') {
          sh '''
            set -euo pipefail
            export HOME=/home/jenkins/agent
            cd gitops

            case "${IMAGE_DIGEST}" in
              *@sha256:*) ;;
              *) echo "[ERROR] IMAGE_DIGEST must be 'repo@sha256:...'" >&2; exit 1 ;;
            esac

            yq -i '.services |= (. // {})' "${GITOPS_PATH}"
            yq -i ".services.\\"${SERVICE_KEY}\\" |= (. // {})" "${GITOPS_PATH}"

            DIGEST_REF="${IMAGE_DIGEST}"
            LATEST_REF="${IMAGE_DIGEST%@*}:latest"

            yq -i ".services.\\"${SERVICE_KEY}\\".imageDigest = strenv(DIGEST_REF)" "${GITOPS_PATH}"
            yq -i ".services.\\"${SERVICE_KEY}\\".imageLatest = strenv(LATEST_REF)"  "${GITOPS_PATH}"
            yq -i ".services.\\"${SERVICE_KEY}\\".image       = strenv(DIGEST_REF)" "${GITOPS_PATH}"

            echo "[INFO] Updated ${GITOPS_PATH}:"
            echo "  - services.${SERVICE_KEY}.imageDigest = ${DIGEST_REF}"
            echo "  - services.${SERVICE_KEY}.imageLatest = ${LATEST_REF}"
            echo "  - services.${SERVICE_KEY}.image       = ${DIGEST_REF} (compat)"
          '''
        }
      }
    }

    stage('Commit & Push (no PR by default)') {
      steps {
        container('git') {
          withCredentials([usernamePassword(credentialsId: 'GitHub-signin', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PAT')]) {
            sh '''
              set -euo pipefail
              export HOME=/home/jenkins/agent
              cd gitops

              git add "${GITOPS_PATH}"
              if git diff --cached --quiet; then
                echo "[INFO] No changes to commit."
                exit 0
              fi

              MSG="${SERVICE_KEY}: image -> ${IMAGE_DIGEST}"
              git commit -m "$MSG"

              HDR=$(printf "%s:%s" "$GIT_USER" "$GIT_PAT" | base64 | tr -d '\\n')

              if [ "${USE_PR}" = "true" ]; then
                BR="chore/${SERVICE_KEY}/image-$(date +%Y%m%d%H%M%S)"
                git checkout -b "$BR"
                git -c http.extraHeader="Authorization: Basic ${HDR}" push -u origin "$BR"

                if command -v gh >/dev/null 2>&1; then
                  GH_TOKEN="${GIT_PAT}" \
                  gh pr create --base "${GITOPS_BRANCH}" --head "$BR" \
                    --title "chore(${SERVICE_KEY}): image update" \
                    --body "$MSG" || true
                else
                  echo "[WARN] gh CLI not found. 브랜치만 푸시했습니다: $BR"
                fi
              else
                git -c http.extraHeader="Authorization: Basic ${HDR}" push origin "${GITOPS_BRANCH}"
              fi
            '''
          }
        }
      }
    }
  }
