pipeline {
  agent {
    kubernetes {
      defaultContainer 'git'
      yaml """
apiVersion: v1
kind: Pod
spec:
  serviceAccountName: jenkins-agent-sa
  containers:
  - name: git
    image: alpine/git:2.45.2
    command: ['sh','-c','sleep infinity']
    tty: true
    volumeMounts:
    - name: ws
      mountPath: /home/jenkins/agent
  - name: yq
    image: mikefarah/yq:4
    command: ['sh','-c','sleep infinity']
    tty: true
    volumeMounts:
    - name: ws
      mountPath: /home/jenkins/agent
  volumes:
  - name: ws
    emptyDir: {}
"""
    }
  }

  parameters {
    string(name: 'SERVICE_KEY',   defaultValue: 'user', description: 'services.<key>')
    string(name: 'IMAGE_DIGEST',  defaultValue: '',     description: '<repo>@sha256:...')
    string(name: 'GITOPS_PATH',   defaultValue: 'env/msa-apps/values.yaml')
    string(name: 'GITOPS_BRANCH', defaultValue: 'main')
    booleanParam(name: 'USE_PR',  defaultValue: false) // 기본값을 false로 변경
  }

  environment {
    GITOPS_REPO_URL = 'https://github.com/profect-team3/order-platform-gitops.git'
    BOT_NAME  = 'yun1270'
    BOT_EMAIL = 'modo000127@gmail.com'
  }

  options {
    timeout(time: 10, unit: 'MINUTES')
    disableConcurrentBuilds()
  }

  stages {
    stage('Checkout GitOps') {
      steps {
        container('git') {
          sh '''
            set -euo pipefail
            rm -rf gitops
            git clone --branch "${GITOPS_BRANCH}" "${GITOPS_REPO_URL}" gitops
          '''
        }
      }
    }

    stage('Update values.yaml') {
      steps {
        container('yq') {
          sh '''
            set -euo pipefail
            cd gitops

            # services.<SERVICE_KEY>.image 필드 보장 및 갱신
            yq -i '.services |= (. // {})' "${GITOPS_PATH}"
            yq -i ".services.\\"${SERVICE_KEY}\\" |= (. // {})" "${GITOPS_PATH}"
            IMAGE_REF="${IMAGE_DIGEST}"
            yq -i ".services.\\"${SERVICE_KEY}\\".image = strenv(IMAGE_REF)" "${GITOPS_PATH}"

            echo "[INFO] Updated ${GITOPS_PATH}: services.${SERVICE_KEY}.image -> ${IMAGE_REF}"
          '''
        }
      }
    }

    stage('Commit & Push (no PR by default)') {
      steps {
        container('git') {
          withCredentials([string(credentialsId: 'github-token', variable: 'GITHUB_TOKEN')]) {
            sh '''
              set -euo pipefail
              cd gitops

              git config user.name  "${BOT_NAME}"
              git config user.email "${BOT_EMAIL}"
              git config --global --add safe.directory "$(pwd)"

              git add "${GITOPS_PATH}"
              if git diff --cached --quiet; then
                echo "[INFO] No changes to commit."
                exit 0
              fi

              MSG="${SERVICE_KEY}: image -> ${IMAGE_DIGEST}"
              git commit -m "$MSG"

              if [ "${USE_PR}" = "true" ]; then
                # PR 모드: 브랜치 생성 + gh CLI 있으면 PR 자동 생성
                BR="chore/${SERVICE_KEY}/image-$(date +%Y%m%d%H%M%S)"
                git checkout -b "$BR"

                # 토큰을 포함한 remote URL로 push (원격에 credential 노출 안 되게 일시 변경)
                ORIGIN_URL="$(git config --get remote.origin.url)"
                AUTH_URL="${ORIGIN_URL/https:\\/\\//https://${BOT_NAME}:${GITHUB_TOKEN}@}"
                git remote set-url origin "${AUTH_URL}"
                git push -u origin "$BR"
                git remote set-url origin "${ORIGIN_URL}"

                if command -v gh >/dev/null 2>&1; then
                  GH_TOKEN="${GITHUB_TOKEN}" gh pr create --base "${GITOPS_BRANCH}" --head "$BR" \
                    --title "chore(${SERVICE_KEY}): image update" \
                    --body "$MSG" || true
                else
                  echo "[WARN] gh CLI not found. 브랜치만 푸시했습니다: $BR"
                fi
              else
                # 직접 main에 push
                ORIGIN_URL="$(git config --get remote.origin.url)"
                AUTH_URL="${ORIGIN_URL/https:\\/\\//https://${BOT_NAME}:${GITHUB_TOKEN}@}"
                git remote set-url origin "${AUTH_URL}"
                git push origin "${GITOPS_BRANCH}"
                git remote set-url origin "${ORIGIN_URL}"
              fi
            '''
          }
        }
      }
    }
  }
}
